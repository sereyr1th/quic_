networks:
  quic-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:

services:
  # Main QUIC Load Balancer
  quic-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: quic-server:latest
    container_name: quic-server
    ports:
      - "9443:9443/tcp"  # HTTP/2 server
      - "9443:9443/udp"  # QUIC/HTTP3 server
      - "8080:8080"      # HTTP server
    networks:
      - quic-network
    environment:
      - GO_ENV=production
      - BACKEND_1_URL=http://quic-backend1:8000
      - BACKEND_2_URL=http://quic-backend2:8000
      - BACKEND_3_URL=http://quic-backend3:8000
    restart: unless-stopped
    depends_on:
      - backend1
      - backend2
      - backend3

  # Backend Services
  backend1:
    image: python:3.11-alpine
    container_name: quic-backend1
    ports:
      - "8081:8000"
    networks:
      - quic-network
    volumes:
      - ./static:/app/static
    working_dir: /app
    command: python3 -m http.server 8000 --directory static
    restart: unless-stopped

  backend2:
    image: python:3.11-alpine
    container_name: quic-backend2
    ports:
      - "8082:8000"
    networks:
      - quic-network
    volumes:
      - ./static:/app/static
    working_dir: /app
    command: python3 -m http.server 8000 --directory static
    restart: unless-stopped

  backend3:
    image: python:3.11-alpine
    container_name: quic-backend3
    ports:
      - "8083:8000"
    networks:
      - quic-network
    volumes:
      - ./static:/app/static
    working_dir: /app
    command: python3 -m http.server 8000 --directory static
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    networks:
      - quic-network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/quic_rules.yml:/etc/prometheus/quic_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - quic-network
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - quic-network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

  # Load Testing Tool (optional)
  load-tester:
    image: alpine/curl:latest
    container_name: load-tester
    networks:
      - quic-network
    volumes:
      - ./test_quic_performance.sh:/test_quic_performance.sh
    entrypoint: ["tail", "-f", "/dev/null"]  # Keep container running
    restart: "no"

  # Health Check Service
  health-checker:
    image: alpine/curl:latest
    container_name: health-checker
    networks:
      - quic-network
    command: >
      sh -c "
        while true; do
          echo 'Health check at $(date)';
          curl -k -v https://quic-server:9443/health || echo 'Health check failed';
          sleep 30;
        done
      "
    depends_on:
      - quic-server
    restart: unless-stopped
